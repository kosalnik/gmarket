// Code generated by MockGen. DO NOT EDIT.
// Source: rate_limiter.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// Fire mocks base method.
func (m *MockRateLimiter) Fire() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fire")
	ret0, _ := ret[0].(int)
	return ret0
}

// Fire indicates an expected call of Fire.
func (mr *MockRateLimiterMockRecorder) Fire() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fire", reflect.TypeOf((*MockRateLimiter)(nil).Fire))
}

// Wait mocks base method.
func (m *MockRateLimiter) Wait(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait", ctx)
}

// Wait indicates an expected call of Wait.
func (mr *MockRateLimiterMockRecorder) Wait(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRateLimiter)(nil).Wait), ctx)
}
